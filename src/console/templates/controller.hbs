{{#if isResourceTemplate}}
import { inject, named } from 'inversify';
import { controller, httpGet, httpPost, httpPut, httpDelete, response, requestBody, requestParam } from 'inversify-express-utils';
import { Types, Targets } from '../../{{deepness}}constants';
import { app } from '../../{{deepness}}app';
import { {{name.capitalize}}Service } from '../{{deepness}}services/{{name.capitalize}}Service';
{{else}}
import { controller } from 'inversify-express-utils';
import { app } from '../../{{deepness}}app';
import { Types, Targets } from '../../{{deepness}}constants';
{{/if}}

// Get middlewares
const authenticate = app.IoC.getNamed<interfaces.Middleware>(Types.Middleware, Targets.Middleware.AuthenticateMiddleware);


@controller('/{{name.pluralize}}', authenticate.use)
export class {{name.capitalize}}Controller {

    {{#if isResourceTemplate}}constructor( @inject(Types.Service) @named(Targets.Service.{{name.capitalize}}Service) private {{name.camelCase}}Service: {{name.capitalize}}Service) { }

    @httpGet('/')
    public async findAll( @response() res: myExpress.Response): Promise<any> {
        const {{name.camelCase}}s = await this.{{name.camelCase}}Service.findAll();
        return res.found({{name.camelCase}}s.toJSON());
    }

    @httpPost('/')
    public async create( @response() res: myExpress.Response, @requestBody() body: any): Promise<any> {
        const {{name.camelCase}} = await this.{{name.camelCase}}Service.create(body);
        return res.created({{name.camelCase}}.toJSON());
    }

    @httpGet('/:id')
    public async findOne( @response() res: myExpress.Response, @requestParam('id') id: string): Promise<any> {
        const {{name.camelCase}} = await this.{{name.camelCase}}Service.findOne(parseInt(id, 10));
        return res.found({{name.camelCase}}.toJSON());
    }

    @httpPut('/:id')
    public async update( @response() res: myExpress.Response, @requestParam('id') id: string, @requestBody() body: any): Promise<any> {
        const {{name.camelCase}} = await this.{{name.camelCase}}Service.update(parseInt(id, 10), body);
        return res.updated({{name.camelCase}}.toJSON());
    }

    @httpDelete('/:id')
    public async destroy( @response() res: myExpress.Response, @requestParam('id') id: string): Promise<any> {
        await this.{{name.camelCase}}Service.destroy(parseInt(id, 10));
        return res.destroyed();
    }{{/if}}
    // Implement your routes here
}
